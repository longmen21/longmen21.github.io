{"name":"Longmen21","tagline":"Open edX 心得","body":"# longmen21.github.io\r\n每日 edX 心得\r\n\r\n## 2015年10月9日 星期五\r\n- open edX架构\r\n\t- 前端：Bourbon(CSS) Sass Backbone.js\r\n \t- 后端：Mako模板，Django\r\n\r\n- 创建pycharm远程编译器\r\nhttps://github.com/edx/edx-platform/wiki/Setting-up-PyCharm-for-edX-development\r\n\r\nxblock id:\r\n9c75db1c5f144aeaba4f6a0df6776197   \r\n生成时间：前10位为unix时间，后两位不明\r\n1444390309852\r\n\r\n- delete xblock (delete) 系统自带方法：\r\n\t/xblock/block-v1:dd+dd+2015_T1+type@youku+block@fed4ce3e544f4eef8b6bf57330b62886\r\n\r\n- 自己的方法：\r\n\tget_params\r\n\t/preview/xblock/block-v1:dd+dd+2015_T1+type@youku+block@fed4ce3e544f4eef8b6bf57330b62886/handler/get_params\r\n\r\n- save xblock fields（post）\r\n\t/xblock/block-v1:dd+dd+2015_T1+type@youku+block@9c75db1c5f144aeaba4f6a0df6776197/handler/save_youku\r\n\r\n- 每次增删改xblock就会请求，这感觉也是一个xblock\r\n\t/xblock/container/block-v1:dd+dd+2015_T1+type@vertical+block@f89b057e8b3b42ac9e7c77a289bb4323\r\n\r\n********************************************************************\r\n###点击新增xblock过程：\r\n- 先POST请求 /xblock/\r\n\t- 告诉xblock种类，和父Xblock的信息，比如vertical xblock\r\n\t返回生成 xblock的id，还有课程及所在单元的混合编码\r\n\tid：c9cbb9c175c24a31ab4ab0afc7de9be3\r\n\r\n- 用当前unix时间请求 \r\n\t- /xblock/block-v1:dd+dd+2015_T1+type@youku+block@c9cbb9c175c24a31ab4ab0afc7de9be3/reorderable_container_child_preview?_=1444391000468\r\n\t无刷新生成页面的js代码和html\r\n\r\n- get_params /preview/xblock/block-v1:dd+dd+2015_T1+type@youku+block@c9cbb9c175c24a31ab4ab0afc7de9be3/handler/get_params\r\n\t通过xblock的id从服务器取得默认参数\r\n\r\n- 修改xblock参数 \r\n\t携填入的参数请求 \r\n\t- /xblock/block-v1:dd+dd+2015_T1+type@youku+block@c9cbb9c175c24a31ab4ab0afc7de9be3/handler/save_youku\r\n\r\n- 删除xblock \r\n\t- 请求 /xblock/block-v1:dd+dd+2015_T1+type@youku+block@c9cbb9c175c24a31ab4ab0afc7de9be3\r\n\r\n- 测试\r\n\thttp://wwj718.github.io/edx-development.html\r\ndevstack安装\r\nhttps://github.com/edx/configuration/wiki/edX-Developer-Stack\r\n\r\nhttp://wwj718.github.io/about-XBlocks.html\r\n\r\n***\r\n## 2015年10月11日 星期日\r\n- 要看的东西很多\r\n\t- community.edustack.org\r\n\t- idefs.com\r\n\t- http://www.cnblogs.com/fengri/p/addlmsfield.html\r\n\t- http://www.cnblogs.com/cardgames/\r\n\r\n- 今天要看的内容\r\n - http://wwj718.github.io/python2-python3.html\r\n - 在同一台机器上安装多个版本Python\r\n - 使用pyenv\r\n \r\n-  http://wwj718.github.io/django-test.html\r\n - Django的单元测试\r\n\t- 编写和运行测试\r\n\t\t- 待看\r\n  \r\n - http://wwj718.github.io/about-XBlocks.html\r\n - 关于XBlock\r\n\t- 原有的组件称为XModule\r\n \r\n - http://wwj718.github.io/edx-development.html\r\n - edX开发相关\r\n\t- IDE: vim+IPython 或者 editor+IPython\r\n\t\t-  或者采用 PyCharm的 远程编辑\r\n  - 代码管理：\r\n\t- 先建立一个分支再进行开发：git checkout -b mybranch\r\n\t- 功能尽量封装成django app，代码尽量模块化\r\n   \t- 主题定制，使用theme，写一套css或者重新写一套模板，而不是修改templates\r\n   \t- 不要hack edxapp的代码\r\n  - 常用工具\r\n\t- IPython\r\n\t\t- 切换到edxapp下安装IPython\r\n\t\t- 执行\r\n     \t\t- sudo -u www-data /edx/bin/python.edxapp ./manage.py lms --settings aws shell\r\n     \t\t- sudo -u www-data /edx/bin/python.edxapp ./manage.py {lms|cms} runserver 8000 --settings aws\r\n     \t- 然后使用django-debug-toolbar来调试\r\n   \t\t- django-extensions\r\n    \t\t- 安装\r\n    \t- runserver_plus 启动测试服务\r\n    \t\t- 用Werkzeug 调试\r\n\t- 网络相关：httpie，nethogs，iftop\r\n  \t- 源码阅读：understand，Souce Insight\r\n  \t- Unix工具箱：git，tail，tmux，htop，ack，diff，grep，tar，scp,crontab \r\n  \r\n http://wwj718.github.io/use-django-debug-toolbar-1.3.2-in-edx.html\r\n安装配置django-debug-toolbar的步骤\r\n \r\n http://django-debug-toolbar.readthedocs.org/en/1.3.2/installation.html\r\n django-debug-toolbar手册\r\n ***\r\n## 2015年10月12日 星期一\r\n- 安装devstack\r\n\t- https://github.com/edx/configuration/wiki/edX-Developer-Stack\r\n - devstack是一个vagrant实例\r\n - 需要了解：\r\n\t- mac os terminal的使用\r\n\t- Vagrant使用\r\n\t- VirtualBox Guest Additions使用NFS共享文件，需哟啊安装NFS客户端\r\n- 安装Vagrant和VirtualBox，接着挂载box文件\r\n\t- http://docs.vagrantup.com/v2/\r\n \r\n- vagrant-vbguest插件：用来自动更新box里的virtual guest additions（http://my.oschina.net/huanming/blog/215877）\r\n可参考 github文档（https://github.com/dotless-de/vagrant-vbguest）\r\n- 先安装nfs-client(mac貌似不用)\r\n- 本地挂载box\r\n      - vagrant --help（http://www.imooc.com/qadetail/62953）\r\n      - vagrant box add --name cypress-devstack-local /path/of/box/file\r\n- 启动\r\n\t--  \r\n\tvagrant init cypress-devstack-local\r\n\t- vagrant up\r\n\t- vagrant ssh登录\r\n\r\n- 中文教程安装教程：http://www.cnblogs.com/cardgames/p/4206434.html\r\n\r\n- 使用IPython\r\n- 使用django-debug-tool\r\n- 断点测试\r\n ***\r\n## 2015年10月13日 星期二\r\n- 遇到问题\r\n\t- service supervisor restart\r\n\t- service rabbitmq-server restart\r\n\r\n- 修改django-debug-toolbar的jquery加载\r\n- 这是django内部的，首先肯定去包那里找，比如venvs下面，其次再在django相关的文件那里找\r\n\t- /edx/app/edxapp/venvs/edxapp/lib/python2.7/site-packages/debug_toolbar/\r\n\t- 编辑 settings.py\r\n\t- 修改该项为：  'JQUERY_URL': 'http://cdn.bootcss.com/jquery/2.1.0-rc1/jquery.min.js',\r\n- 重启devstack的 studio\r\n\r\n- 写完了保利威视的XBlock，to-do-list:\r\n - 需要进一步设置断点调试\r\n - 找到XBlock数据存储到哪里\r\n - 怎么读取mysql里面的数据\r\n - 怎么能读取到用户的session信息\r\n - 看XBlock API，分析那些Scope的作用域\r\n - 探索XBlock不同的写法\r\n\t1. 数据请求式 -- 请求handler\r\n\t2. 数据注入式 -- 注入到MAKO中（官方不推荐使用render_template）\r\n    3. 去看其他的XBlock写法 https://github.com/edx/edx-platform/wiki/List-of-XBlocks\r\n - 看XBlock的调用机制\t\r\n - django 调试\r\n\t- http://blog.sina.com.cn/s/blog_703fd35e0100z928.html\r\n\t- pycharm远程调试Django\r\n\t\t- http://www.68idc.cn/help/jiabenmake/python/20150125188927.html\r\n\t- 使用ipdb(django自带)\r\n\t\r\n\t```\r\n\timport ipdb \r\n\tipdb.set_trace()\r\n\t```\r\n\t\t\r\n\t***\r\n## 2015年10月14日 星期三\r\n- Django新手注意的10点：\r\n\t- http://blog.csdn.net/feng88724/article/details/7401024\r\n- python的日志logging模块学习： \r\n\t- http://www.cnblogs.com/dkblog/archive/2011/08/26/2155018.html\r\n- pyenv配置及使用（http://www.codeweblog.com/%E8%AE%B0%E5%BD%95mac%E4%B8%8B%E5%AE%89%E8%A3%85pyenv%E6%97%B6%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/）\r\n\t- 需要在/User下创建 .bash_profile 文件\r\n\t- 添加内容 \r\n\t\r\n\tif which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\r\n\t(可选) if which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\r\n\t\r\n\t- 然后 source .bash_profile\r\n\t- 更改版本使用 pyenv shell + 版本\r\n\t\t- pyenv global 不管用 \r\n\t\t\r\n\t- 将XAMPP的mysql 链入/usr/bin，才能在shell里使用 mysql 命令登录数据库\r\n\t\t- ln -s /Applications/XAMPP/bin/mysql /usr/bin\r\n\t\t- 修改mysql密码 \r\n\t\t\t- UPDATE user SET password=PASSWORD('root') WHERE user='root';\r\n\t\t\t- FLUSH PRIVILEGES; \r\n\t\r\n\t- 在pycharm里面生成venv，不用自己安装，之后在pycharm生成的venv里面安装django1.4，检测到包后再new project\r\n\t- 在homebrew安装了 mysql之后，解决了编译失败的问题\r\n\t- 然后安装 插件\r\n\r\n- 今晚找一个小的开源的基于django 1.4的应用，或者自己写一个，基于增删改查的东西\r\n\t- 试试pycharm的断点测试\r\n\t- 模板是MAKO的，学一学\r\n\t- 看看django的调试的过程\r\n\t\t- 博客\r\n\t- 配置djang-debug-toolbar\r\n\t\t- http://my.oschina.net/u/1029242/blog/150738 \r\n\t\t- https://github.com/robhudson/django-debug-toolbar\r\n- 在pycharm里面配置virtualenv\r\n\t- 在interpreter里面创建虚拟环境（找一个目录），继承父环境的包\r\n\t\t- 如果没找到虚拟环境的python2.7可执行文件，就手动去虚拟环境的bin下面找python2.7\r\n\t\t- 然后打开，在线安装包，选择版本，或者在shell里面进入虚拟环境，手动安装包\r\n\t\t- 再新建django项目，选择该虚拟环境，选择MAKO(可能会自动安装包 django-mako )\r\n- MAKO模板\r\n\t- http://docs.makotemplates.org/en/latest/usage.html#basic-usage\r\n\r\n***\r\n## 2015年10月15日 星期四\r\n- django 1.4手记\r\n\t- Design philosophies\r\n\t\t- http://django-14-tkliuxing.readthedocs.org/en/latest/misc/design-philosophies.html#dry \r\n\t- how to read django docs\r\n\t\t- http://django-14-tkliuxing.readthedocs.org/en/latest/intro/whatsnext.html\r\n\t- python logging模块\r\n\t\t- http://www.cnblogs.com/dkblog/archive/2011/08/26/2155018.html\r\n\t- 手动断点 assert FALSE\r\n\t\t- assert用法\r\n\t\t\t- 为那些还不清楚它的人，Python的assert是用来检查一个条件，如果它为真，就不做任何事。\r\n\t\t\t如果它为假，则会抛出AssertError并且包含错误信息\r\n\t\t\t- 它可以被编译好然后从来不执行，如果你用 –O 或 –oo 选项运行Python，结果不保证assert表达式会运行到。\r\n\t\t当适当的使用assert时，这是未来，但是当assert不恰当的使用时，它会让代码用-O执行时出错。\r\n\t\t\t- http://blog.jobbole.com/76285/\r\n\t\t\t- 等同于\r\n\t\t\t\tif __debug__:\r\n\t\t\t\t\traise AssertionError \r\n\t- http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way\r\n\r\n- django1.4及MAKO文档\r\n\thttp://django-14-tkliuxing.readthedocs.org/en/latest/intro/tutorial02.html\r\n\thttp://docs.makotemplates.org/en/latest/usage.html#basic-usage\r\n\t\r\n- PDB使用\r\n命令\t              \t\t用途\r\nb\t      \t\t\t\t设置断点\r\nc\t  \t\t\t\t\t继续执行程序\r\nl\t     \t\t\t\t查看当前行的代码段\r\ns\t\t\t\t\t\t进入函数\r\nr\t\t\t\t\t\t执行代码直到从当前函数返回\r\nq\t\t\t\t\t\t中止并退出\r\nn\t\t\t\t\t\t执行下一行\r\npp\t\t\t\t\t\t打印变量的值\r\nhelp\t\t\t\t\t帮助\r\n\r\nhttp://blog.csdn.net/carolzhang8406/article/details/6923997\r\n\r\n\t如果不想在函数里单步调试可以在断点出直接按r退出到调用的地方。\r\n\t在调试的时候动态改变值。\r\n\tb如果已经被赋值了，如果想重新改变b的赋值，则应该使用！b\r\n\r\n\tb(reak)， 设置断点，例如 “b 77″，就是在当前脚本的77行打上断点，还能输入函数名作为参数，断点就打到具体的函数入口，如果只敲b，会显示现有的全部断点 \r\n\t(Pdb) b 504\r\n\tBreakpoint 4 at /home/jchen/regression/regressionLogCMP.py:504\r\n\r\n\tcondition bpnumber [condition]，设置条件断点，下面语句就是对第4个断点加上条件“a==3” \r\n\t(Pdb) condition 4 a==3\r\n\t(Pdb) b\r\n\tNum Type Disp Enb Where\r\n\t4 breakpoint keep yes at /home/jchen/regression/regressionLogCMP.py:504\r\n\tstop only if a==3\r\n\r\n\tcl(ear)，如果后面带有参数，就是清除指定的断点（我在Python2.4上从来没成功过！！！）；如果不带参数就是清除所有的断点 \r\n\t(Pdb) cl\r\n\tClear all breaks? y\r\n\r\n\tdisable/enable，禁用/激活断点 \r\n\t(Pdb) disable 3\r\n\t(Pdb) b\r\n\tNum Type Disp Enb Where\r\n\t3 breakpoint keep no at /home/jchen/regression/regressionLogCMP.py:505\r\n\r\n\tj(ump)，让程序跳转到指定的行数 \r\n\ta(rgs)，打印当前函数的参数 \r\n\t！，感叹号后面跟着语句，可以直接改变某个变量\r\n\t使用 u 和 d 命令，我们可以在栈帧之间切换，用以获取其相关上下文变量信息。w可以显示最近的一些栈帧信息。\r\n\t\r\n\t打断点的时候不要打在函数的def处。如果这样做，import的时候会运行到这个位置，真正调用函数时却不会停住。\r\n\timport的时候会生成Python内部的运行指令，因此会运行到每个函数定义的地方。\r\n\t\r\n* pdb函数\r\n\t* pdb.run(statement[, globals[, locals]])\r\n\t* pdb.runeval(expression[, globals[, locals]])\r\n\t* pdb.runcall(function[, argument, ...])\r\n\t* pdb.set_trace()\r\n\r\n\r\n-find命令\r\n\t-name   按照文件名查找文件。\r\n\t-perm   按照文件权限来查找文件。\r\n\t-prune  使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略。\r\n\t-user   按照文件属主来查找文件。\r\n\t-group  按照文件所属的组来查找文件。\r\n\t-type  查找某一类型的文件，诸如：\r\n\t\t# b - 块设备文件。\r\n\t\t# d - 目录。\r\n\t\t# c - 字符设备文件。\r\n\t\t# p - 管道文件。\r\n\t\t# l - 符号链接文件。\r\n\t\t# f - 普通文件。\r\n\t\r\n-mtime    -n +n                 #按文件更改时间来查找文件，-n指n天以内，+n指n天以前\r\n\r\n-mtime    -n +n                 #按文件更改时间来查找文件，-n指n天以内，+n指n天以前\r\n\r\n-atime     -n +n                #按文件访问时间来查\r\n找文件，-n指n天以内，+n指n天以前 \r\n\r\n-ctime     -n +n                #按文件创建时间来查找文件，-n指n天以内，+n指n天以前 \r\n\t\r\n\tfind    /home    -mtime    -2                   在/home下查最近两天内改动过的文件\r\n\t\r\n\t***\r\n## 2015年10月16日 星期六\r\n- 过两天折腾github博客\r\n\t- simple: http://isnowfy.github.io/about-simple-cn.html\r\n\t- heox: http://blog.csdn.net/poem_of_sunshine/article/details/29369785/\r\n\t- jekyll: http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html\r\n\t- http://www.zhihu.com/question/20962496\r\n\r\n- 单元测试过后再看\r\n\t\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}